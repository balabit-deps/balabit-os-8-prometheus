Description: Disable kubernetes SD, until dependencies are more reasonable.
--- a/config/config.go
+++ b/config/config.go
@@ -169,9 +169,6 @@
 		tlsPaths(&scfg.TLSConfig)
 	}
 	sdPaths := func(cfg *sd_config.ServiceDiscoveryConfig) {
-		for _, kcfg := range cfg.KubernetesSDConfigs {
-			clientPaths(&kcfg.HTTPClientConfig)
-		}
 		for _, mcfg := range cfg.MarathonSDConfigs {
 			mcfg.AuthTokenFile = join(mcfg.AuthTokenFile)
 			clientPaths(&mcfg.HTTPClientConfig)
--- a/config/testdata/conf.good.yml
+++ b/config/testdata/conf.good.yml
@@ -158,33 +158,6 @@
 
   bearer_token: mysecret
 
-- job_name: service-kubernetes
-
-  kubernetes_sd_configs:
-  - role: endpoints
-    api_server: 'https://localhost:1234'
-    tls_config:
-      cert_file: valid_cert_file
-      key_file: valid_key_file
-
-    basic_auth:
-      username: 'myusername'
-      password: 'mysecret'
-
-- job_name: service-kubernetes-namespaces
-
-  kubernetes_sd_configs:
-  - role: endpoints
-    api_server: 'https://localhost:1234'
-    namespaces:
-      names:
-        - default
-
-  basic_auth:
-    username: 'myusername'
-    password_file: valid_password_file
-
-
 - job_name: service-marathon
   marathon_sd_configs:
   - servers:
--- a/discovery/kubernetes/endpoints.go
+++ b/discovery/kubernetes/endpoints.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/endpoints_test.go
+++ b/discovery/kubernetes/endpoints_test.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/kubernetes.go
+++ b/discovery/kubernetes/kubernetes.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/node.go
+++ b/discovery/kubernetes/node.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/node_test.go
+++ b/discovery/kubernetes/node_test.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/pod.go
+++ b/discovery/kubernetes/pod.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/pod_test.go
+++ b/discovery/kubernetes/pod_test.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/service.go
+++ b/discovery/kubernetes/service.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/service_test.go
+++ b/discovery/kubernetes/service_test.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/cmd/promtool/main.go
+++ b/cmd/promtool/main.go
@@ -226,12 +226,6 @@
 			return nil, err
 		}
 
-		for _, kd := range scfg.ServiceDiscoveryConfig.KubernetesSDConfigs {
-			if err := checkTLSConfig(kd.HTTPClientConfig.TLSConfig); err != nil {
-				return nil, err
-			}
-		}
-
 		for _, filesd := range scfg.ServiceDiscoveryConfig.FileSDConfigs {
 			for _, file := range filesd.Files {
 				files, err := filepath.Glob(file)
--- a/discovery/kubernetes/ingress.go
+++ b/discovery/kubernetes/ingress.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/ingress_test.go
+++ b/discovery/kubernetes/ingress_test.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/cmd/prometheus/main.go
+++ b/cmd/prometheus/main.go
@@ -41,7 +41,6 @@
 	"github.com/prometheus/common/promlog"
 	"github.com/prometheus/common/version"
 	kingpin "gopkg.in/alecthomas/kingpin.v2"
-	"k8s.io/klog"
 
 	promlogflag "github.com/prometheus/common/promlog/flag"
 	"github.com/prometheus/prometheus/config"
@@ -326,10 +325,6 @@
 	promql.LookbackDelta = time.Duration(cfg.lookbackDelta)
 	promql.SetDefaultEvaluationInterval(time.Duration(config.DefaultGlobalConfig.EvaluationInterval))
 
-	// Above level 6, the k8s client would log bearer tokens in clear-text.
-	klog.ClampLevel(6)
-	klog.SetLogger(log.With(logger, "component", "k8s_client_runtime"))
-
 	level.Info(logger).Log("msg", "Starting Prometheus", "version", version.Info())
 	level.Info(logger).Log("build_context", version.BuildContext())
 	level.Info(logger).Log("host_details", prom_runtime.Uname())
--- a/discovery/config/config.go
+++ b/discovery/config/config.go
@@ -21,7 +21,6 @@
 	"github.com/prometheus/prometheus/discovery/ec2"
 	"github.com/prometheus/prometheus/discovery/file"
 	"github.com/prometheus/prometheus/discovery/gce"
-	"github.com/prometheus/prometheus/discovery/kubernetes"
 	"github.com/prometheus/prometheus/discovery/marathon"
 	"github.com/prometheus/prometheus/discovery/openstack"
 	"github.com/prometheus/prometheus/discovery/targetgroup"
@@ -45,8 +44,6 @@
 	NerveSDConfigs []*zookeeper.NerveSDConfig `yaml:"nerve_sd_configs,omitempty"`
 	// MarathonSDConfigs is a list of Marathon service discovery configurations.
 	MarathonSDConfigs []*marathon.SDConfig `yaml:"marathon_sd_configs,omitempty"`
-	// List of Kubernetes service discovery configurations.
-	KubernetesSDConfigs []*kubernetes.SDConfig `yaml:"kubernetes_sd_configs,omitempty"`
 	// List of GCE service discovery configurations.
 	GCESDConfigs []*gce.SDConfig `yaml:"gce_sd_configs,omitempty"`
 	// List of EC2 service discovery configurations.
@@ -84,11 +81,6 @@
 			return errors.New("empty or null section in gce_sd_configs")
 		}
 	}
-	for _, cfg := range c.KubernetesSDConfigs {
-		if cfg == nil {
-			return errors.New("empty or null section in kubernetes_sd_configs")
-		}
-	}
 	for _, cfg := range c.MarathonSDConfigs {
 		if cfg == nil {
 			return errors.New("empty or null section in marathon_sd_configs")
--- a/discovery/manager.go
+++ b/discovery/manager.go
@@ -32,7 +32,6 @@
 	"github.com/prometheus/prometheus/discovery/ec2"
 	"github.com/prometheus/prometheus/discovery/file"
 	"github.com/prometheus/prometheus/discovery/gce"
-	"github.com/prometheus/prometheus/discovery/kubernetes"
 	"github.com/prometheus/prometheus/discovery/marathon"
 	"github.com/prometheus/prometheus/discovery/openstack"
 	"github.com/prometheus/prometheus/discovery/triton"
@@ -373,11 +372,6 @@
 			return marathon.NewDiscovery(*c, log.With(m.logger, "discovery", "marathon"))
 		})
 	}
-	for _, c := range cfg.KubernetesSDConfigs {
-		add(c, func() (Discoverer, error) {
-			return kubernetes.New(log.With(m.logger, "discovery", "k8s"), c)
-		})
-	}
 	for _, c := range cfg.ServersetSDConfigs {
 		add(c, func() (Discoverer, error) {
 			return zookeeper.NewServersetDiscovery(c, log.With(m.logger, "discovery", "zookeeper"))
--- a/config/config_test.go
+++ b/config/config_test.go
@@ -32,7 +32,6 @@
 	"github.com/prometheus/prometheus/discovery/dns"
 	"github.com/prometheus/prometheus/discovery/ec2"
 	"github.com/prometheus/prometheus/discovery/file"
-	"github.com/prometheus/prometheus/discovery/kubernetes"
 	"github.com/prometheus/prometheus/discovery/marathon"
 	"github.com/prometheus/prometheus/discovery/openstack"
 	"github.com/prometheus/prometheus/discovery/targetgroup"
@@ -347,66 +346,6 @@
 			},
 		},
 		{
-			JobName: "service-kubernetes",
-
-			HonorTimestamps: true,
-			ScrapeInterval:  model.Duration(15 * time.Second),
-			ScrapeTimeout:   DefaultGlobalConfig.ScrapeTimeout,
-
-			MetricsPath: DefaultScrapeConfig.MetricsPath,
-			Scheme:      DefaultScrapeConfig.Scheme,
-
-			ServiceDiscoveryConfig: sd_config.ServiceDiscoveryConfig{
-				KubernetesSDConfigs: []*kubernetes.SDConfig{
-					{
-						APIServer: kubernetesSDHostURL(),
-						Role:      kubernetes.RoleEndpoint,
-						HTTPClientConfig: config_util.HTTPClientConfig{
-							BasicAuth: &config_util.BasicAuth{
-								Username: "myusername",
-								Password: "mysecret",
-							},
-							TLSConfig: config_util.TLSConfig{
-								CertFile: filepath.FromSlash("testdata/valid_cert_file"),
-								KeyFile:  filepath.FromSlash("testdata/valid_key_file"),
-							},
-						},
-						NamespaceDiscovery: kubernetes.NamespaceDiscovery{},
-					},
-				},
-			},
-		},
-		{
-			JobName: "service-kubernetes-namespaces",
-
-			HonorTimestamps: true,
-			ScrapeInterval:  model.Duration(15 * time.Second),
-			ScrapeTimeout:   DefaultGlobalConfig.ScrapeTimeout,
-
-			MetricsPath: DefaultScrapeConfig.MetricsPath,
-			Scheme:      DefaultScrapeConfig.Scheme,
-			HTTPClientConfig: config_util.HTTPClientConfig{
-				BasicAuth: &config_util.BasicAuth{
-					Username:     "myusername",
-					PasswordFile: filepath.FromSlash("testdata/valid_password_file"),
-				},
-			},
-
-			ServiceDiscoveryConfig: sd_config.ServiceDiscoveryConfig{
-				KubernetesSDConfigs: []*kubernetes.SDConfig{
-					{
-						APIServer: kubernetesSDHostURL(),
-						Role:      kubernetes.RoleEndpoint,
-						NamespaceDiscovery: kubernetes.NamespaceDiscovery{
-							Names: []string{
-								"default",
-							},
-						},
-					},
-				},
-			},
-		},
-		{
 			JobName: "service-marathon",
 
 			HonorTimestamps: true,
@@ -663,7 +602,7 @@
 	yamlConfig := string(config)
 
 	matches := secretRe.FindAllStringIndex(yamlConfig, -1)
-	testutil.Assert(t, len(matches) == 6, "wrong number of secret matches found")
+	testutil.Assert(t, len(matches) == 5, "wrong number of secret matches found")
 	testutil.Assert(t, !strings.Contains(yamlConfig, "mysecret"),
 		"yaml marshal reveals authentication credentials.")
 }
@@ -677,11 +616,6 @@
 	testutil.Equals(t, ruleFilesExpectedConf, c)
 }
 
-func TestKubernetesEmptyAPIServer(t *testing.T) {
-	_, err := LoadFile("testdata/kubernetes_empty_apiserver.good.yml")
-	testutil.Ok(t, err)
-}
-
 var expectedErrors = []struct {
 	filename string
 	errMsg   string
@@ -756,21 +690,6 @@
 		filename: "bearertoken_basicauth.bad.yml",
 		errMsg:   "at most one of basic_auth, bearer_token & bearer_token_file must be configured",
 	}, {
-		filename: "kubernetes_http_config_without_api_server.bad.yml",
-		errMsg:   "to use custom HTTP client configuration please provide the 'api_server' URL explicitly",
-	}, {
-		filename: "kubernetes_bearertoken.bad.yml",
-		errMsg:   "at most one of bearer_token & bearer_token_file must be configured",
-	}, {
-		filename: "kubernetes_role.bad.yml",
-		errMsg:   "role",
-	}, {
-		filename: "kubernetes_namespace_discovery.bad.yml",
-		errMsg:   "field foo not found in type kubernetes.plain",
-	}, {
-		filename: "kubernetes_bearertoken_basicauth.bad.yml",
-		errMsg:   "at most one of basic_auth, bearer_token & bearer_token_file must be configured",
-	}, {
 		filename: "marathon_no_servers.bad.yml",
 		errMsg:   "marathon_sd: must contain at least one Marathon server",
 	}, {
@@ -895,8 +814,3 @@
 	exp.original = "global:\n"
 	testutil.Equals(t, exp, *c)
 }
-
-func kubernetesSDHostURL() config_util.URL {
-	tURL, _ := url.Parse("https://localhost:1234")
-	return config_util.URL{URL: tURL}
-}
--- a/discovery/kubernetes/kubernetes_test.go
+++ b/discovery/kubernetes/kubernetes_test.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
--- a/discovery/kubernetes/client_metrics.go
+++ b/discovery/kubernetes/client_metrics.go
@@ -11,6 +11,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// +build ignore
+
 package kubernetes
 
 import (
